---
# ----------------------------
# Prototype - Build, Rebuild-{Manual,Health}
# ----------------------------
- hosts: localhost
  connection: local
  gather_facts: no
  roles:
    - role: ansible.kubernetes-modules
      install_python_requirements: False
  tasks:

    - name: Poll Health Status
      debug:
        msg: "Poll Health Status..."

    - debug:
        msg: "Health Status: {{ health_status }}"

# TODO: Would need a conditional for HealthStatus in the case
# of periodic rebuild.  If none or recommended don't build.  If mandatory
# start-build.


# ----------------------------
# Read Dockerfile
# ----------------------------
# To determine the base image that the ISV's container uses we need parse that
# from the Dockerfile.  Those variables will be used in ImageStream and ImageStreamTags
# ----------------------------
    - name: Checkout
      git:
        repo: "{{ source_url }}"
        dest: "{{ source_dest_path }}"
        update: False

    - set_fact:
        base_image: "{{ item | regex_replace('FROM ') }}"
      when: "'FROM' in item"
      with_items:
        - "{{ lookup('file', dockerfile_path ).split('\n') }}"

    - set_fact:
        base_image_tag: "{{ base_image.split(':')[-1] }}"
        base_image_name: "{{ base_image.split(':')[0].split('/')[-1] }}"
        tag_from_name: "{{ base_image.split(':')[0] }}"

# ----------------------------
# Base Image Change
# ----------------------------
# What happens when the base image change for the ISV container?
# Let's check what the current base image is and compare it to what is
# presently in the Dockerfile.  If it is not the same create a new base image.
# ----------------------------
    - name: Check Base Image
      openshift_v1_image_stream:
        name: "{{ base_image_name }}"
        namespace: "{{ namespace }}"
      register: isbase

    - block:
       - name: Template Base ImageStream
         template:
           src: templates/baseis.yaml.j2
           dest: /tmp/baseis.yaml
           force: True
         register: baseis

       - name: Create Base ImageStream
         openshift_v1_image_stream:
           name: "{{ base_image_name }}"
           namespace: "{{ namespace }}"
           src: "{{ baseis.dest | default(baseis.path) }}"
       - name: Template Base ImageStream
         template:
           src: templates/baseistag.yaml.j2
           dest: /tmp/baseistag.yaml
           force: True
         register: baseistag
       - name: Create Base ImageStreamTag
         command: "oc -n {{ namespace }} create -f {{ baseistag.dest | default(baseistag.path) }}"
         ignore_errors: True
      when: tag_from_name not in isbase.image_stream.spec.tags[-1]['_from'].name

# ----------------------------
# Rebuild
# ----------------------------
# Get the current ImageStream to determine the build number: tag-build#
# Increment the build number.  Update the BuildConfig to push to new
# ImageStreamTag.  If the base image has changed modify that as well.
# ----------------------------

    - name: Get ISV ImageStream
      openshift_v1_image_stream:
        name: "{{ isv_image_name }}"
        namespace: "{{ namespace }}"
      register: is


    - debug:
        var: is

    - set_fact:
        build_number: "{{ (is.image_stream.status.tags[0].tag.split('-')[-1] | int) + 1 }}"

    - debug:
        var: build_number

    - name: Update BuildConfig
      openshift_v1_build_config:
        name: "generic-buildconfig"
        namespace: "{{ namespace }}"
        spec_output_to_name: "{{ isv_image_name }}:{{ isv_image_tag }}-{{ build_number }}"
        spec_strategy_docker_strategy__from_name: "{{ base_image_name }}:{{ base_image_tag }}"

    - name: Start Build
      command: "oc -n {{ namespace }} start-build --follow generic-buildconfig"


    - name: Poll Scan Results
      debug:
        msg: "Polling Scan Results...."

    - name: Publish
      debug:
        msg: "Publishing...."
      when: not scan_results


# ----------------------------
# Clean up tags
# ----------------------------
# How many tags to keep?
# Quantity
# Time
#
# ----------------------------

    - block:
        - debug:
            var: is.image_stream.status.tags[0].get('items')[0].created | to_datetime("%Y-%m-%dT%H:%M:%SZ")

      when: is.image_stream.status.tags | length > 1

