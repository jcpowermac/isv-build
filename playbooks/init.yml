- hosts: localhost
  connection: local
  gather_facts: no
  roles:
    - role: ansible.kubernetes-modules
  tasks:
    - name: Create Project
      openshift_v1_project:
        name: '{{ namespace }}'
    - name: Create local secret
      user:
        name: '{{ namespace }}'
        generate_ssh_key: True
        ssh_key_bits: 2048
        ssh_key_file: .ssh/id_rsa
      become: True
      register: user
    - debug:
        msg: '{{ user }}'

    - file:
        path: "/home/fastcompany"
        recurse: True
        mode: 0777
      become: True

    - file:
        path: "{{ user.ssh_key_file }}"
        mode: 0777
      become: True

    - name: Create GitHub Secret
      k8s_v1_secret:
        debug: False
        name: "{{ source_secret_name }}"
        namespace: '{{ namespace }}'
        type: kubernetes.io/ssh-auth
        string_data:
          ssh-privatekey: "{{ lookup('file', user.ssh_key_file )}}"
      ignore_errors: True

    - name: Checkout
      git:
        repo: "{{ source_url }}"
        dest: "{{ source_dest_path }}" #/tmp/checkout
        update: False

    - command: "cat {{ dockerfile_path }}"
      register: lines

    - set_fact:
        base_image: "{{ item | regex_replace('FROM ') }}"
      when: "'FROM' in item"
      with_items:
        - "{{ lines.stdout_lines }}"

    - set_fact:
        base_image_tag: "{{ base_image.split(':')[-1] }}"
        base_image_name: "{{ base_image.split(':')[0].split('/')[-1] }}"
        tag_from_name: "{{ base_image.split(':')[0] }}"



        #    - name: Import Base Image Stream
        #  openshift_v1_image_stream_import:
        #  opname: "{{ base_image_name }}"
        #  opnamespace: "{{ namespace }}"
        #  opspec_repository__from_kind: DockerImage
        #  opspec_repository__from_name: "{{ base_image }}"
        #  opspec_repository_import_policy_scheduled: True

    - name: Template Base ImageStream
      template:
        src: templates/baseis.yaml.j2
        dest: /tmp/baseis.yaml
        force: True
      register: baseis


    - debug:
        msg: "{{ baseis }}"
      #msg: "{{ tag_from_name }}"


    - name: Create Base ImageStream
      openshift_v1_image_stream:
        name: "{{ base_image_name }}"
        namespace: "{{ namespace }}"
        src: "{{ baseis.path }}"


    - name: Create ISV ImageStream
      openshift_v1_image_stream:
        name: "{{ isv_image_name }}"
        namespace: "{{ namespace }}"


    - name: Template Base ImageStream
      template:
        src: templates/baseistag.yaml.j2
        dest: /tmp/baseistag.yaml
        force: True
      register: baseistag

    - name: Template BuildConfig
      template:
        src: templates/build.yaml.j2
        dest: /tmp/bc.yaml
        force: True
      register: bc


        #    - name: Create Base ImageStreamTag
        #      openshift_v1_image_stream_tag:
        #        name: "{{ base_image_name }}:{{ base_image_tag }}"
        #        namespace: "{{ namespace }}"
        #        tag__from_kind: DockerImage
        #        tag__from_name: "{{ tag_from_name }}"
        #        scheduled: True
        #        tag_name: "{{ base_image_tag }}"
        #

    # NOTE: ** image_stream_tag and image_stream_import modules are broken


      #    - name: Create Base ImageStream
      #      command: "oc -n {{ namespace }} create -f {{ baseis.dest | default(baseis.path) }}"

    - name: Create Base ImageStreamTag
      command: "oc -n {{ namespace }} create -f {{ baseistag.dest | default(baseistag.path) }}"
      ignore_errors: True


    - name: Create BuildConfig
      openshift_v1_build_config:
        name: "generic-buildconfig"
        namespace: "{{ namespace }}"
        spec_output_to_kind: ImageStreamTag
        spec_output_to_name: "{{ isv_image_name }}:{{ isv_image_tag }}-1"
        spec_source_type: "Git"
        spec_source_git_ref: "{{ source_ref }}"
        spec_source_git_uri: "{{ source_url }}"
        spec_source_source_secret_name: "{{ source_secret_name }}"
        spec_strategy_docker_strategy_dockerfile_path: "{{ source_dockerfile_path }}"
        spec_strategy_docker_strategy__from_kind: ImageStreamTag
        spec_strategy_docker_strategy__from_name: "{{ base_image_name }}:{{ base_image_tag }}"
        spec_resources_requests:
          cpu: "1"
          memory: "4Gi"

        # NOTE: BUG with requiring state then another warning with using state
          #    - name: start build
          #      openshift_v1_build_request:
          #        name: "generic-buildconfig"
          #        namespace: "{{ namespace }}"
          #        state: present
          #      register: build
          #
    - name: Start Build
      command: "oc -n {{ namespace }} start-build -f generic-buildconfig"



    - name: Scan Results
      debug:
        msg: "Read scan results, print scan results"

