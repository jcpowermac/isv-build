---
# ----------------------------
# Prototype - New AutoBuild Config
# ----------------------------
- hosts: localhost
  connection: local
  gather_facts: no
  roles:
    - role: ansible.kubernetes-modules
  tasks:
    - name: Create Project
      openshift_v1_project:
        name: '{{ namespace }}'

# ----------------------------
# Secrets
# ----------------------------
# https://docs.openshift.org/latest/dev_guide/builds/build_inputs.html#source-clone-secrets
#
# This section creates an SSH key and creates an OpenShift ssh-auth secret
# to be used when cloning the repository during a build.
# ----------------------------
    - name: Create local secret
      user:
        name: '{{ namespace }}'
        generate_ssh_key: True
        ssh_key_bits: 2048
        ssh_key_file: .ssh/id_rsa
      become: True
      register: user
    - debug:
        msg: '{{ user }}'

    - file:
        path: "/home/fastcompany"
        recurse: True
        mode: 0777
      become: True

    - file:
        path: "{{ user.ssh_key_file }}"
        mode: 0777
      become: True

    - name: Create GitHub Secret
      k8s_v1_secret:
        debug: False
        name: "{{ source_secret_name }}"
        namespace: '{{ namespace }}'
        type: kubernetes.io/ssh-auth
        string_data:
          ssh-privatekey: "{{ lookup('file', user.ssh_key_file )}}"
      ignore_errors: True

# ----------------------------
# Read Dockerfile
# ----------------------------
# To determine the base image that the ISV's container uses we need parse that
# from the Dockerfile.  Those variables will be used in ImageStream and ImageStreamTags
# ----------------------------

    - name: Checkout
      git:
        repo: "{{ source_url }}"
        dest: "{{ source_dest_path }}"
        update: False

    - set_fact:
        base_image: "{{ item | regex_replace('FROM ') }}"
      when: "'FROM' in item"
      with_items:
        - "{{ lookup('file', dockerfile_path ).split('\n') }}"

# NOTE: This will break if there is no tag but this is only a prototype
    - set_fact:
        base_image_tag: "{{ base_image.split(':')[-1] }}"
        base_image_name: "{{ base_image.split(':')[0].split('/')[-1] }}"
        tag_from_name: "{{ base_image.split(':')[0] }}"

# ----------------------------
# ImageStream{,Tag}
# ----------------------------
# This section templates and creates the ImageStream{,Tag}
# These will be used for the base image and the resulting image that will
# be built using a BuildConfig.
#
# There is an added configuration for the base image that enables the scheduled
# check if the image has been updated.
# ----------------------------

    - name: Template Base ImageStream
      template:
        src: templates/baseis.yaml.j2
        dest: /tmp/baseis.yaml
        force: True
      register: baseis

    - name: Create Base ImageStream
      openshift_v1_image_stream:
        name: "{{ base_image_name }}"
        namespace: "{{ namespace }}"
        src: "{{ baseis.path }}"

    - name: Create ISV ImageStream
      openshift_v1_image_stream:
        name: "{{ isv_image_name }}"
        namespace: "{{ namespace }}"

    - name: Template Base ImageStream
      template:
        src: templates/baseistag.yaml.j2
        dest: /tmp/baseistag.yaml
      register: baseistag

    - name: Create Base ImageStreamTag
      command: "oc -n {{ namespace }} create -f {{ baseistag.dest | default(baseistag.path) }}"
      ignore_errors: True

# ----------------------------
# BuildConfig
# ----------------------------
#
#
# Resource Requests
# ----------------------------
# To control the number of concurrent builds (thundering herd problem) this will need to be configured
# to a fractional amount of memory or cpu of the node that is running the build.
# ----------------------------

    - name: Create BuildConfig
      openshift_v1_build_config:
        name: "generic-buildconfig"
        namespace: "{{ namespace }}"
        spec_output_to_kind: ImageStreamTag
        spec_output_to_name: "{{ isv_image_name }}:{{ isv_image_tag }}-1"
        spec_source_type: "Git"
        spec_source_git_ref: "{{ source_ref }}"
        spec_source_git_uri: "{{ source_url }}"
        spec_source_source_secret_name: "{{ source_secret_name }}"
        spec_strategy_docker_strategy_dockerfile_path: "{{ source_dockerfile_path }}"
        spec_strategy_docker_strategy__from_kind: ImageStreamTag
        spec_strategy_docker_strategy__from_name: "{{ base_image_name }}:{{ base_image_tag }}"
        spec_resources_requests:
          cpu: "1"
          memory: "4Gi"

    - name: Start Build
      command: "oc -n {{ namespace }} start-build --follow generic-buildconfig"

    - name: Scan Results
      debug:
        msg: "Read scan results, print scan results"

